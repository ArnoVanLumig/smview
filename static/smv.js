// Generated by CoffeeScript 1.3.3
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  CodeMirror.defineMode("smv", function(config) {
    var reserved;
    reserved = {
      keywords: ["MODULE", "main", "DEFINE", "MDEFINE", "CONSTANTS", "VAR", "IVAR", "FROZENVAR", "INIT", "TRANS", "INVAR", "SPEC", "CTLSPEC", "LTLSPEC", "PSLSPEC", "COMPUTE", "NAME", "INVARSPEC", "FAIRNESS", "JUSTICE", "COMPASSION", "ISA", "ASSIGN", "CONSTRAINT", "SIMPWFF", "CTLWFF", "LTLWFF", "PSLWFF", "COMPWFF", "IN", "MIN", "MAX", "MIRROR", "PRED", "PREDICATES"],
      types: ["process", "array", "of", "boolean", "integer", "real", "word", "word1", "bool", "signed", "unsigned", "extend", "resize", "sizeof", "uwconst", "swconst"],
      predicates: ["EX", "AX", "EF", "AF", "EG", "AG", "E", "F", "O", "G", "H", "X", "Y", "Z", "A", "U", "S", "V", "T", "BU", "EBF", "ABF", "EBG", "ABG"],
      operators: ["case", "esac", "mod", "next", "init", "union", "in", "xor", "xnor", "self", "count", "running"],
      constants: ["TRUE", "FALSE"]
    };
    return {
      token: function(stream, state) {
        var r, v, _ref;
        if (stream.eatSpace()) {
          return null;
        }
        if (stream.match(/^\d+/)) {
          return "constants";
        }
        if (stream.match(/^\w*/)) {
          for (r in reserved) {
            v = reserved[r];
            if (_ref = stream.current(), __indexOf.call(v, _ref) >= 0) {
              return r;
            }
          }
        }
        stream.next();
        return null;
      }
    };
  });

}).call(this);
