// Generated by CoffeeScript 1.3.3
(function() {
  var codeArea, codeMirror, codeMirrorChange, doRmUploader, doRunTests, drop, knownMd5, markers, rmUploader, runTests, stopEvent;

  knownMd5 = "";

  markers = [];

  doRunTests = function(code) {
    return $.ajax({
      type: "POST",
      url: "run",
      data: {
        code: code
      },
      success: function(data) {
        var error, errors, lineNo, marker, _i, _j, _len, _len1, _results;
        $("#right div.wrapper").html(data);
        knownMd5 = $("span.md5").text();
        $.bbq.pushState({
          md5: knownMd5
        });
        for (_i = 0, _len = markers.length; _i < _len; _i++) {
          marker = markers[_i];
          codeMirror.clearMarker(marker);
          codeMirror.setLineClass(marker, null, null);
        }
        markers = [];
        errors = $(".errorLine");
        if (errors.length > 0) {
          _results = [];
          for (_j = 0, _len1 = errors.length; _j < _len1; _j++) {
            error = errors[_j];
            lineNo = +error.innerHTML.trim();
            console.log(lineNo);
            marker = codeMirror.setMarker(lineNo - 1, "●");
            codeMirror.setLineClass(marker, "", "errorline");
            _results.push(markers.push(marker));
          }
          return _results;
        }
      },
      error: function() {
        return alert("nay");
      }
    });
  };

  doRmUploader = function() {
    return $("#uploader").remove();
  };

  runTests = _.debounce(doRunTests, 500);

  rmUploader = _.once(doRmUploader);

  codeMirrorChange = function(editor, diff) {
    var code;
    code = editor.getValue();
    runTests(code);
    return rmUploader();
  };

  codeArea = document.getElementById("codeArea");

  codeMirror = CodeMirror.fromTextArea(codeArea, {
    lineNumbers: true,
    autofocus: true,
    gutter: true,
    matchBrackets: true,
    onChange: codeMirrorChange,
    mode: "smv"
  });

  $(window).bind("hashchange", function(e) {
    var md5;
    md5 = $.bbq.getState("md5");
    if (md5 !== knownMd5 && (md5 != null)) {
      return $.ajax({
        type: "GET",
        url: "getcode",
        data: {
          md5: md5
        },
        success: function(data) {
          return codeMirror.setValue(data);
        },
        error: function() {
          return alert("nay");
        }
      });
    }
  });

  stopEvent = function(evt) {
    evt.stopPropagation();
    return evt.preventDefault();
  };

  drop = function(evt) {
    var count, file, files, reader;
    evt.stopPropagation();
    evt.preventDefault();
    files = evt.dataTransfer.files;
    count = files.length;
    if (count === 1) {
      file = files[0];
      reader = new FileReader();
      reader.onload = function(evt2) {
        var code;
        code = evt2.target.result;
        return codeMirror.setValue(code);
      };
      return reader.readAsText(file);
    } else {
      return alert("Please drag and drop a single file");
    }
  };

  if (typeof String.prototype.trim === "undefined") {
    String.prototype.trim = function() {
      return String(this).replace(/^\s+|\s+$/g, '');
    };
  }

  $(window).trigger("hashchange");

  $(function() {
    var dropbox;
    dropbox = $("#uploader")[0];
    dropbox.addEventListener("dragenter", stopEvent);
    dropbox.addEventListener("dragexit", stopEvent);
    dropbox.addEventListener("dragover", stopEvent);
    return dropbox.addEventListener("drop", drop);
  });

}).call(this);
